stages:
    - validate
    - build
    - test

image: matzeeable/ci-php-composer-node:latest

variables:
    COMPOSE_PROJECT_NAME: wprjss_ci # Prefix created compose services so we can act on them (volumes, network, not container because they are named by container_name)
    CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/.cypress"
    YARN_CACHE_FOLDER: "$CI_PROJECT_DIR/.yarn"
    DOCKER_DRIVER: overlay2
    GIT_CLEAN_FLAGS: none # -ffdx -e docker/scripts/.env-wp.lock # Do not clean WP run status

# Due to the usage of GIT_CLEAN_FLAGS the cache is no longer used because it is very slow.
#cache:
#    key: "$CI_COMMIT_REF_SLUG"
#    untracked: true
#    paths:
#        # Because this are a lot of files the compression for the cache in default zip format is very
#        # slow. See also https://gitlab.com/gitlab-org/gitlab-runner/merge_requests/1173
#        - .cypress/
#        - .yarn/
#        - node_modules/
#        - vendor/

#########################
### Others
#########################

# This is NOT a job and will be ignored by GitLab-CI, it allows before_script per job without duplicate code
.installsteps:
    &installsteps # This is an anchor and can be used with <<: *installsteps (https://gitlab.com/gitlab-org/gitlab-ce/issues/15403)
    before_script:
        - yarn install --frozen-lockfile
        - composer install
        - yarn grunt copy-npmLibs
        - yarn grunt cachebuster:public

.purgesteps: &purgesteps
    services:
        - docker:dind
    allow_failure: true
    script:
        # Remove running containers
        - docker ps -a
        - export CURRENT_CONTAINERS=$(docker ps -a --format "{{.ID}} {{.Names}}" | awk '$2~/wprjss_development_/{print $1}')
        - echo $CURRENT_CONTAINERS
        - test "$CURRENT_CONTAINERS" && docker rm -f -v $CURRENT_CONTAINERS
        # Remove available volumes
        - docker volume ls
        - export CURRENT_VOLUMES=$(docker volume ls --format "{{.Name}}" | awk '$1~/wprjss_ci/{print $1}')
        - test "$CURRENT_VOLUMES" && docker volume remove -f $CURRENT_VOLUMES
        # Remove available networks
        - docker network ls
        - export CURRENT_NETWORKS=$(docker network list --format "{{.Name}}" | awk '$1~/wprjss_ci/{print $1}')
        - test "$CURRENT_NETWORKS" && docker volume remove -f $CURRENT_NETWORKS
        - echo "Successfully removed containers, volumes and networks..."

#########################
### Stage: validate
#########################

install: # Install all dependencies with previous caches
    <<: *installsteps
    stage: validate
    script: echo .
    except:
        changes:
            - yarn.lock
            - composer.lock

reinstall: # The reinstall step should install all dependencies from scratch when a lock file got changed
    <<: *installsteps
    variables:
        GIT_CLEAN_FLAGS: -ffdx
    stage: validate
    script: echo .
    only:
        changes:
            - yarn.lock
            - composer.lock

docker purge: # When docker relevant files got changed remove all docker containers automatically
    <<: *purgesteps
    stage: validate
    only:
        changes:
            - docker/**/*
            - .gitlab-ci.yml

docker purge manual: # Allow also to manually stop the docker containers
    <<: *purgesteps
    stage: validate
    when: manual

#########################
### Stage: build
#########################

docs: # Generate technical documents
    <<: *installsteps
    stage: build
    script:
        - yarn docs
    artifacts:
        name: technical-docs
        paths:
            - docs/

lint: # Lint the project (TS)
    <<: *installsteps
    stage: build
    script: yarn lint

serve: # Create dist files of the plugin
    <<: *installsteps
    stage: build
    script: yarn serve
    artifacts:
        name: installable-plugin
        paths:
            - dist/

#########################
### Stage test
#########################

docker e2e:
    stage: test
    services:
        - docker:dind
    script:
        # Wait until WordPress is up and start cypress within a container
        - docker-compose --log-level ERROR -f docker/development/docker-compose.yml -f docker/development/docker-compose.ci.yml up --build -d
        - while [ ! -f 'docker/scripts/.env-wp.lock' ]; do sleep 1; done
        - docker run --network wprjss_ci_wprjss -v "${PWD}":/e2e -w /e2e cypress/included:3.2.0 run --config baseUrl=http://wordpress
    after_script:
        # Stop running containers
        - export CURRENT_CONTAINERS=$(docker ps -a --format "{{.ID}} {{.Names}}" | awk '$2~/wprjss_development_/{print $1}')
        - test "$CURRENT_CONTAINERS" && docker stop $CURRENT_CONTAINERS
    artifacts:
        name: test-result
        when: always # Always create cypress results
        paths:
            - cypress/screenshots
            - cypress/videos
